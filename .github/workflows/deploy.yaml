# .github/workflows/deploy.yml
#
# • If its current package.json version has not been tagged before,
#   we tag the commit, build, deploy, and draft a release.
# • No files are edited or committed by this workflow.

name: Deployment

on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        subgraph:
          - bonds
          - polygon-digital-carbon
          - carbonmark
          - protocol-metrics
          - vesting
          - user-carbon
          - pairs
          - celo-bridged-carbon
          - ethereum-bridged-carbon

    steps:
      # ────────────────────────────────────────────────────────────────
      # 0. Checkout + Setup
      # ────────────────────────────────────────────────────────────────
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_ACCESS_TOKEN }}
      - name: Configure Git author
        run: |
          git config --global user.name  "deploy-action"
          git config --global user.email "deploy-action@carbonmark.com"
      # Derive subgraph slug
      - name: Derive subgraph slug
        id: slug
        run: |
          if [[ "${{ matrix.subgraph }}" == "polygon-digital-carbon" || "${{ matrix.subgraph }}" == "celo-bridged-carbon" ]]; then
            echo "slug=${{ matrix.subgraph }}" >> "$GITHUB_OUTPUT"
          else
            echo "slug=klimadao-${{ matrix.subgraph }}" >> "$GITHUB_OUTPUT"
          fi

      # ────────────────────────────────────────────────────────────────
      # 1. Read version from package.json & see if a tag already exists
      # ────────────────────────────────────────────────────────────────
      - name: Extract version + decide whether to deploy
        id: version
        env:
          SG: ${{ matrix.subgraph }}
        shell: bash
        run: |
          VERSION=$(jq -r .version "$SG/package.json")
          TAG="$SG-v$VERSION"

          echo "version=$VERSION"   >> $GITHUB_OUTPUT
          echo "tag_name=$TAG"      >> $GITHUB_OUTPUT

          if git tag --list | grep -qx "$TAG"; then
            echo "exist=true"       >> $GITHUB_OUTPUT
            echo "Tag $TAG already exists – will skip build/deploy."
          else
            echo "exist=false"      >> $GITHUB_OUTPUT
          fi

      # ──────────────────────────────────────────
      # 2. Install deps, build, deploy if new tag
      # ──────────────────────────────────────────
      - name: Setup Node
        if: steps.version.outputs.exist == 'false'
        uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Install root dependencies
        if: steps.version.outputs.exist == 'false'
        run: npm install
      - name: Install workspace dependencies
        if: steps.version.outputs.exist == 'false'
        run: npm install
        working-directory: ${{ matrix.subgraph }}

      - name: Generate code
        if: steps.version.outputs.exist == 'false'
        run: npm run codegen
        working-directory: ${{ matrix.subgraph }}

      - name: Build subgraph
        if: steps.version.outputs.exist == 'false'
        run: npm run build
        working-directory: ${{ matrix.subgraph }}

      - name: Deploy to Subgraph Studio
        if: steps.version.outputs.exist == 'false'
        env:
          DEPLOY_KEY: ${{ secrets.SUBGRAPH_STUDIO_DEPLOY_KEY }}
        run: |
          ../node_modules/.bin/graph deploy --studio \
            --deploy-key "$DEPLOY_KEY" \
            "${{ steps.slug.outputs.slug }}" \
            --version-label "${{ steps.version.outputs.version }}"
        working-directory: ${{ matrix.subgraph }}

      - name: Deploy to Alchemy Hosted Service
        if: >
          steps.version.outputs.exist == 'false' &&
          ( matrix.subgraph == 'carbonmark' ||
            matrix.subgraph == 'polygon-digital-carbon' ||
            matrix.subgraph == 'pairs' ||
            matrix.subgraph == 'ethereum-bridged-carbon' )
        env:
          DEPLOY_KEY: ${{ secrets.SUBGRAPH_ALCHEMY_HOSTED_SERVICE_DEPLOY_KEY }}
        run: |
          ../node_modules/.bin/graph deploy \
            "${{ steps.slug.outputs.slug }}" \
            --deploy-key "$DEPLOY_KEY" \
            --node https://subgraphs.alchemy.com/api/subgraphs/deploy \
            --ipfs https://ipfs.satsuma.xyz \
            --version-label "${{ steps.version.outputs.version }}"
        working-directory: ${{ matrix.subgraph }}

      # ────────────────────────────────────────────────────────────────
      # 3. Tag + draft release  (only if the tag was new)
      # ────────────────────────────────────────────────────────────────
      - name: Create Git tag
        if: steps.version.outputs.exist == 'false'
        env:
          TAG: ${{ steps.version.outputs.tag_name }}
        run: |
          git tag -a "$TAG" -m "${{ matrix.subgraph }} release $TAG"
          git push origin "$TAG"

      - name: Find previous tag
        id: prev
        run: |
          LAST_TAG=$(git tag --list "${{ matrix.subgraph }}-v*" | sort -V | tail -n 2 | head -n 1)
          echo "last_tag=${LAST_TAG:-0.0.0}" >> "$GITHUB_OUTPUT"

      - name: Generate changelog
        if: steps.version.outputs.exist == 'false'
        id: changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
          LAST_TAG: ${{ steps.prev.outputs.last_tag }}
          SUBGRAPH_NAME: ${{ matrix.subgraph }}
          NEW_PUBLISHED_VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "Generating changelog from $LAST_TAG to ${SUBGRAPH_NAME}-v${NEW_PUBLISHED_VERSION}"
          node .github/actions-scripts/generateChangelog.mjs

      - name: Draft GitHub release
        if: steps.version.outputs.exist == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          release_name: ${{ steps.version.outputs.tag_name }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: true
