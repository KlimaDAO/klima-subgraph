name: Deployment

on:
  push:
    branches:
      - main
      - staging
      # @todo for testing the versioning and releases process
      - repo/versioning-and-releases


jobs:
  compile:
    runs-on: ubuntu-latest
    name: Deploy
    strategy:
      matrix:
        value:
          [
            'bonds',
            'carbonmark',
            'protocol-metrics',
            'vesting',
            'user-carbon',
            'pairs',
            'celo-bridged-carbon',
            'ethereum-bridged-carbon',
            'polygon-bridged-carbon',
            'polygon-digital-carbon',
          ]
    steps:
      - name: Check out source repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Install dependencies
        run: yarn --frozen-lockfile
        working-directory: '${{ matrix.value }}'
      - name: Get last release tag
        id: get_last_tag
        run: |
          LAST_TAG=$(git tag --list "${{ matrix.value }}-v*" | sort -V | tail -n 1)
          if [ -z "$LAST_TAG" ]; then
            LAST_TAG="0.0.0"  # Fallback for no existing tags
          fi
          echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT
          echo "Fetched LAST_TAG: $LAST_TAG"
        working-directory: '${{ matrix.value }}'
      - name: Get schema version from package.json
        id: get_schema_version
        run: |
          SCHEMA_VERSION=$(cat package.json | grep '"version":' | cut -d'"' -f4)
          echo "schema_version=$SCHEMA_VERSION" >> $GITHUB_OUTPUT
          echo "Fetched SCHEMA_VERSION: $SCHEMA_VERSION"
        working-directory: '${{ matrix.value }}'
      - name: Compare schema versions and determine new version
        id: compare_versions
        run: |
          LAST_PUBLISHED_VERSION=${{ steps.get_last_tag.outputs.last_tag }}
          SCHEMA_VERSION=${{ steps.get_schema_version.outputs.schema_version }}

          echo "Fetched LAST_PUBLISHED_VERSION: $LAST_PUBLISHED_VERSION"
          echo "Schema version: $SCHEMA_VERSION"

          NUMERIC_LAST_PUBLISHED_VERSION=$(echo $LAST_PUBLISHED_VERSION | sed 's/.*-v//')
          IFS='.' read -ra LAST_PUBLISHED_VERSION_PARTS <<< "$NUMERIC_LAST_PUBLISHED_VERSION"

          MAJOR=${LAST_PUBLISHED_VERSION_PARTS[0]}
          MINOR=${LAST_PUBLISHED_VERSION_PARTS[1]}
          PATCH=${LAST_PUBLISHED_VERSION_PARTS[2]}

          IFS='.' read -ra SCHEMA_VERSION_PARTS <<< "$SCHEMA_VERSION"
          SCHEMA_MAJOR=${SCHEMA_VERSION_PARTS[0]}
          SCHEMA_MINOR=${SCHEMA_VERSION_PARTS[1]}
          SCHEMA_PATCH=${SCHEMA_VERSION_PARTS[2]}

          # determine version increment
          if [[ "$SCHEMA_MAJOR" -gt "$MAJOR" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            SHOULD_DEPLOY=true
          elif [[ "$SCHEMA_MAJOR" -eq "$MAJOR" && "$SCHEMA_MINOR" -gt "$MINOR" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
            SHOULD_DEPLOY=true
          elif [[ "$SCHEMA_MAJOR" -eq "$MAJOR" && "$SCHEMA_MINOR" -eq "$MINOR" && "$SCHEMA_PATCH" -gt "$PATCH" ]]; then
            PATCH=$((PATCH + 1))
            SHOULD_DEPLOY=true
          else
            echo "Schema version is not greater than last published version. No deployment needed."
            SHOULD_DEPLOY=false
          fi

          NEW_PUBLISHED_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_PUBLISHED_VERSION=$NEW_PUBLISHED_VERSION" >> $GITHUB_OUTPUT
          echo "should_deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT

      - name: Verify new published version
        run: |
          echo "NEW_PUBLISHED_VERSION: ${{ steps.compare_versions.outputs.new_published_version }}"
        working-directory: '${{ matrix.value }}'
      - name: Set version in version.json
        if: steps.compare_versions.outputs.should_deploy == 'true'
        run: |
          NEW_PUBLISHED_VERSION=${{ steps.compare_versions.outputs.new_published_version }}
          SCHEMA_VERSION=${{ steps.get_schema_version.outputs.schema_version }}
          echo "{\"schemaVersion\": \"$SCHEMA_VERSION\", \"publishedVersion\": \"$NEW_PUBLISHED_VERSION\"}" > version.json
        working-directory: '${{ matrix.value }}'
      - name: Set Version in version.ts for version entity
        if: steps.compare_versions.outputs.should_deploy == 'true'
        run: npm run set-version
        working-directory: '${{ matrix.value }}'
      - name: Prepare Manifest if polygon-digital-carbon or carbonmark
        if: matrix.value == 'polygon-digital-carbon' || matrix.value == 'carbonmark'
        run: npm run prepare-matic
        working-directory: '${{ matrix.value }}'
      - name: Commit all changes
        if: steps.compare_versions.outputs.should_deploy == 'true'
        run: |
          NEW_PUBLISHED_VERSION=${{ steps.compare_versions.outputs.new_published_version }}

          git config user.email "deploy-action@carbonmark.com"
          git config user.name "deploy-action"

          git commit -am "action: update to publishedVersion: $NEW_PUBLISHED_VERSION for ${{ matrix.value }}"

          if [[ "${GITHUB_REF}" == "refs/heads/"* ]]; then
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
          elif [[ "${GITHUB_REF}" == "refs/pull/"* ]]; then
            BRANCH_NAME=${GITHUB_HEAD_REF}
          else
            echo "Unsupported GITHUB_REF format: ${GITHUB_REF}"
            exit 1
          fi

          echo "Pushing to branch: $BRANCH_NAME"

          git push origin $BRANCH_NAME
        working-directory: '${{ matrix.value }}'
      - name: Tag the commit with the new version
        if: steps.compare_versions.outputs.should_deploy == 'true'
        run: |
          NEW_VERSION=${{ steps.compare_versions.outputs.new_published_version }}
          echo "NEW_VERSION: $NEW_VERSION"
          git tag -a "${{ matrix.value }}-v${NEW_VERSION}" -m "${{ matrix.value }} version: ${NEW_VERSION}"

          # List tags to verify the tag has been created
          echo "Tags after creation:"
          git fetch --tags
          git tag --list | grep "${{ matrix.value }}-v"

          git push origin $BRANCH_NAME --tags
        working-directory: '${{ matrix.value }}'
      # Generate code and check for uncommitted changes
      # https://github.com/marketplace/actions/check-uncommitted-changes
      - name: Generate Subgraph Code
        if: steps.compare_versions.outputs.should_deploy == 'true'
        run: npm run codegen
        working-directory: '${{ matrix.value }}'
      - name: Check for uncommitted changes
        if: steps.compare_versions.outputs.should_deploy == 'true'
        id: check-changes
        uses: mskri/check-uncommitted-changes-action@v1.0.1
      - name: Evaluate if there are changes
        if: steps.check-changes.outputs.outcome == failure()
        run: echo "There are uncommitted changes - execute 'npm run codegen' locally and commit the generated files!"

      - name: Build Subgraph
        if: steps.compare_versions.outputs.should_deploy == 'true'
        run: npm run build
        working-directory: '${{ matrix.value }}'
      # TODO: add matchstick test suite
      # - name: Run Tests
      #   run: npm run test
      #   working-directory: "${{ matrix.value }}"

      - name: Staging or not
        if: steps.compare_versions.outputs.should_deploy == 'true'
        id: staging_or_not
        run: |
          echo "short_sha=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_OUTPUT

          if [ $REF == "refs/heads/staging" ]
          then
              PREFIX="staging-"
          fi;

          if [[ "${{ matrix.value }}" =~ .*"-".*"-carbon".* ]]
          then
              echo "subgraph=${PREFIX}${{ matrix.value }}" >> $GITHUB_OUTPUT
          else
              echo "subgraph=${PREFIX}klimadao-${{ matrix.value }}" >> $GITHUB_OUTPUT
          fi
        env:
          REF: ${{ github.ref }}
      # - name: Deploy Subgraph to Studio
      #   if: steps.compare_versions.outputs.should_deploy == 'true'
      #   run: |
      #     VERSION_LABEL="${{ steps.compare_versions.outputs.new_published_version }}"

      #     ../node_modules/.bin/graph deploy --studio --deploy-key ${{ secrets.SUBGRAPH_STUDIO_DEPLOY_KEY }} "${{ steps.staging_or_not.outputs.subgraph }}" --version-label "$VERSION_LABEL"
      #   working-directory: '${{ matrix.value }}'
      # - name: Deploy Subgraph to Alchemy Hosted Service
      #   if: ${{ (matrix.value == 'carbonmark' || matrix.value == 'polygon-digital-carbon' || matrix.value == 'pairs' || matrix.value == 'ethereum-bridged-carbon') && (!contains(fromJson(env.VERSIONED_SUBGRAPHS), matrix.value) || (contains(fromJson(env.VERSIONED_SUBGRAPHS), matrix.value) && steps.compare_versions.outputs.should_deploy == 'true')) }}
      #   run: |
      #     VERSION_LABEL="${{ steps.compare_versions.outputs.new_published_version }}"

      #     ../node_modules/.bin/graph deploy "${{ steps.staging_or_not.outputs.subgraph }}" --deploy-key ${{ secrets.SUBGRAPH_ALCHEMY_HOSTED_SERVICE_DEPLOY_KEY }} --node https://subgraphs.alchemy.com/api/subgraphs/deploy --ipfs https://ipfs.satsuma.xyz --version-label "$VERSION_LABEL"
      #   working-directory: '${{ matrix.value }}'
      - name: Create issue for deployment tracking
        uses: JasonEtco/create-an-issue@v2
        if: steps.compare_versions.outputs.should_deploy == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISHED_VERSION: ${{ steps.compare_versions.outputs.new_published_version }}
          SUBGRAPH_NAME: ${{ matrix.value }}
      - name: Generate Changelog
        if: steps.compare_versions.outputs.should_deploy == 'true'
        id: generate_changelog
        run: |
          LAST_TAG=${{ steps.get_last_tag.outputs.last_tag }}
          NEW_TAG="${{ matrix.value }}-v${{ steps.compare_versions.outputs.new_published_version }}"

          echo "Generating changelog from $LAST_TAG to $NEW_TAG"

          # Fetch commit messages between LAST_TAG and NEW_TAG that match the specified patterns
          COMMITS=$(git log ${LAST_TAG}..${NEW_TAG} --pretty=format:"%s" | grep -E '^(feat|fix|docs|chore|refactor|style|test):' || true)

          FEAT=""
          FIX=""
          DOCS=""
          CHORE=""
          REFACTOR=""
          STYLE=""
          TEST=""

          # Iterate over each commit and categorize them
          for COMMIT in $COMMITS; do
            TYPE=$(echo "$COMMIT" | cut -d':' -f1)
            MESSAGE=$(echo "$COMMIT" | cut -d':' -f2-)
            case $TYPE in
              feat)
                FEAT="${FEAT}\n- ${MESSAGE}"
                ;;
              fix)
                FIX="${FIX}\n- ${MESSAGE}"
                ;;
              docs)
                DOCS="${DOCS}\n- ${MESSAGE}"
                ;;
              chore)
                CHORE="${CHORE}\n- ${MESSAGE}"
                ;;
              refactor)
                REFACTOR="${REFACTOR}\n- ${MESSAGE}"
                ;;
              style)
                STYLE="${STYLE}\n- ${MESSAGE}"
                ;;
              test)
                TEST="${TEST}\n- ${MESSAGE}"
                ;;
            esac
          done

          # Compile the categorized changelog
          CHANGELOG=""
          if [ -n "$FEAT" ]; then
            CHANGELOG="${CHANGELOG}\n### Features\n${FEAT}"
          fi
          if [ -n "$FIX" ]; then
            CHANGELOG="${CHANGELOG}\n### Bug Fixes\n${FIX}"
          fi
          if [ -n "$DOCS" ]; then
            CHANGELOG="${CHANGELOG}\n### Documentation\n${DOCS}"
          fi
          if [ -n "$CHORE" ]; then
            CHANGELOG="${CHANGELOG}\n### Chores\n${CHORE}"
          fi
          if [ -n "$REFACTOR" ]; then
            CHANGELOG="${CHANGELOG}\n### Refactors\n${REFACTOR}"
          fi
          if [ -n "$STYLE" ]; then
            CHANGELOG="${CHANGELOG}\n### Styles\n${STYLE}"
          fi
          if [ -n "$TEST" ]; then
            CHANGELOG="${CHANGELOG}\n### Tests\n${TEST}"
          fi
        
          # Remove leading and trailing blank lines
          CHANGELOG=$(echo -e "$CHANGELOG" | sed '/^$/d')

          # Handle the case where no changelog entries are found
          if [ -z "$CHANGELOG" ]; then
            echo "No changelog entries found."
            echo "changelog=No changes." >> $GITHUB_OUTPUT
          else
            echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT
          fi

          # Set changelog as output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        working-directory: '${{ matrix.value }}'
      - name: Create GitHub Release
        if: steps.compare_versions.outputs.should_deploy == 'true'
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ matrix.value }}-v${{ steps.compare_versions.outputs.new_published_version }}"
          release_name: "${{ matrix.value }} v${{ steps.compare_versions.outputs.new_published_version }}"
          body: ${{ steps.generate_changelog.outputs.changelog }}
          draft: true