# Explanation of steps:
# 1. Checkout the source repository: Retrieve the latest code from the repository.
# 2. Setup Node: Install and configure the required Node.js version (16 for initial setup, later 18 for changelog generation).
# 3. Install dependencies: Install all project dependencies using yarn --frozen-lockfile.
# 4. Get last release tag: Fetch the most recent version tag from Git and use 0.0.0 as a fallback if no tag exists.
# 5. Get schema version from package.json: Extract the schema version from the package.json file.
# 6. Compare schema versions and determine new version: Compare the schema version with the last published version, and calculate a new version tag if the schema version is higher.
# 7. Set version in version.json: Update the version.json file with the new schema and published version if a new deployment is needed.
# 8. Set version in version.ts: Update version.ts for the subgraph to reflect the new version if a deployment is necessary.
# 9. Prepare manifest: Run a specific manifest preparation step (npm run prepare-matic) for the polygon-digital-carbon and carbonmark subgraphs if a new version is being deployed.
# 10. Commit all changes: Stage, commit, and push any updated files (like version.json and version.ts) to the repository.
# 11. Tag the commit with the new version: Create and push a Git tag for the new version, appending the subgraph name.
# 12. Generate Subgraph Code: Run the npm run codegen command to generate code for the subgraph if changes are detected.
# 13. Check for uncommitted changes: Ensure there are no uncommitted changes in the subgraph after code generation.
# 14. Evaluate if there are changes: Print a message indicating if there are uncommitted changes and advise executing code generation locally if necessary.
# 15. Build Subgraph: Run the build process for the subgraph (npm run build).
# 16. Determine if branch is staging or not: Identify if the branch is staging or another branch, and set a prefix for the subgraph name.
# 17. Create issue for deployment tracking: Automatically create a GitHub issue to track the deployment process.
# 18. Check Node.js version (debugging): Verify the Node.js version in use (node -v).
# 19. Generate Changelog: Run a custom script (.github/actions-scripts/generateChangelog.mjs) to generate a changelog between the last tag and the new version.
# 20. Create GitHub Release: Draft a new GitHub release with the generated changelog for the new version.

name: Deployment

on:
  push:
    branches:
      - alt/main-eoa-deployments

jobs:
  compile:
    runs-on: ubuntu-latest
    name: Deploy
    env:
      IS_MAIN: ${{ github.ref == 'refs/heads/alt/main-eoa-deployments' }}
    strategy:
      max-parallel: 1
      matrix:
        value: [
            # 'bonds',
            # 'polygon-digital-carbon',
            'carbonmark',
            # 'polygon-bridged-carbon',
            # 'protocol-metrics',
            # 'vesting',
            # 'user-carbon',
            # 'pairs',
            # 'celo-bridged-carbon',
            # 'ethereum-bridged-carbon',
          ]
    steps:
      - name: Check out source repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Install dependencies
        run: yarn --frozen-lockfile
        working-directory: '${{ matrix.value }}'
      - name: Get published version from version.json
        id: get_published_version
        run: |
          PUBLISHED_VERSION=$(jq -r '.publishedVersion' version.json)
          echo "published_version=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
          echo "Extracted published version: $PUBLISHED_VERSION"
        working-directory: '${{ matrix.value }}'
      - name: Generate Subgraph Code
        run: npm run codegen
        working-directory: '${{ matrix.value }}'
      - name: Build Subgraph
        run: npm run build
        working-directory: '${{ matrix.value }}'
      - name: Set subgraph name
        id: set_subgraph_name
        run: |
          if [[ "${{ matrix.value }}" =~ .*"-".*"-carbon".* ]]
          then
              echo "subgraph=${PREFIX}${{ matrix.value }}" >> $GITHUB_OUTPUT
          else
              echo "subgraph=${PREFIX}klimadao-${{ matrix.value }}" >> $GITHUB_OUTPUT
          fi
        env:
          REF: ${{ github.ref }}
      - name: Deploy Subgraph to Studio
        run: |
          ../node_modules/.bin/graph deploy --studio --deploy-key ${{ secrets.SUBGRAPH_STUDIO_DEPLOY_KEY_ALTERNATE_EOA }} "${{ steps.set_subgraph_name.outputs.subgraph }}" --version-label "$steps.get_published_version.outputs.published_version"
        working-directory: '${{ matrix.value }}'
