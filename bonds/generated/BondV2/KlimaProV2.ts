// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuthorityUpdated extends ethereum.Event {
  get params(): AuthorityUpdated__Params {
    return new AuthorityUpdated__Params(this);
  }
}

export class AuthorityUpdated__Params {
  _event: AuthorityUpdated;

  constructor(event: AuthorityUpdated) {
    this._event = event;
  }

  get authority(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Bond extends ethereum.Event {
  get params(): Bond__Params {
    return new Bond__Params(this);
  }
}

export class Bond__Params {
  _event: Bond;

  constructor(event: Bond) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CloseMarket extends ethereum.Event {
  get params(): CloseMarket__Params {
    return new CloseMarket__Params(this);
  }
}

export class CloseMarket__Params {
  _event: CloseMarket;

  constructor(event: CloseMarket) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class CreateMarket extends ethereum.Event {
  get params(): CreateMarket__Params {
    return new CreateMarket__Params(this);
  }
}

export class CreateMarket__Params {
  _event: CreateMarket;

  constructor(event: CreateMarket) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get baseToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get quoteToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get initialPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get conclusion(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Tuned extends ethereum.Event {
  get params(): Tuned__Params {
    return new Tuned__Params(this);
  }
}

export class Tuned__Params {
  _event: Tuned;

  constructor(event: Tuned) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldControlVariable(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newControlVariable(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class KlimaProV2__adjustmentsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class KlimaProV2__depositResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class KlimaProV2__marketsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: boolean;
  value4: boolean;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: boolean,
    value4: boolean,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    return map;
  }
}

export class KlimaProV2__metadataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: i32;
  value6: i32;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: i32,
    value6: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    return map;
  }
}

export class KlimaProV2__notesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    return map;
  }
}

export class KlimaProV2__pendingForResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class KlimaProV2__termsResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: boolean,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class KlimaProV2 extends ethereum.SmartContract {
  static bind(address: Address): KlimaProV2 {
    return new KlimaProV2("KlimaProV2", address);
  }

  adjustments(param0: BigInt): KlimaProV2__adjustmentsResult {
    let result = super.call(
      "adjustments",
      "adjustments(uint256):(uint128,uint48,uint48,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new KlimaProV2__adjustmentsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_adjustments(
    param0: BigInt
  ): ethereum.CallResult<KlimaProV2__adjustmentsResult> {
    let result = super.tryCall(
      "adjustments",
      "adjustments(uint256):(uint128,uint48,uint48,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KlimaProV2__adjustmentsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  authority(): Address {
    let result = super.call("authority", "authority():(address)", []);

    return result[0].toAddress();
  }

  try_authority(): ethereum.CallResult<Address> {
    let result = super.tryCall("authority", "authority():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  create(
    _tokens: Array<Address>,
    _market: Array<BigInt>,
    _booleans: Array<boolean>,
    _terms: Array<BigInt>,
    _intervals: Array<BigInt>
  ): BigInt {
    let result = super.call(
      "create",
      "create(address[2],uint256[4],bool[2],uint256[2],uint32[2]):(uint256)",
      [
        ethereum.Value.fromAddressArray(_tokens),
        ethereum.Value.fromUnsignedBigIntArray(_market),
        ethereum.Value.fromBooleanArray(_booleans),
        ethereum.Value.fromUnsignedBigIntArray(_terms),
        ethereum.Value.fromUnsignedBigIntArray(_intervals)
      ]
    );

    return result[0].toBigInt();
  }

  try_create(
    _tokens: Array<Address>,
    _market: Array<BigInt>,
    _booleans: Array<boolean>,
    _terms: Array<BigInt>,
    _intervals: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "create",
      "create(address[2],uint256[4],bool[2],uint256[2],uint32[2]):(uint256)",
      [
        ethereum.Value.fromAddressArray(_tokens),
        ethereum.Value.fromUnsignedBigIntArray(_market),
        ethereum.Value.fromBooleanArray(_booleans),
        ethereum.Value.fromUnsignedBigIntArray(_terms),
        ethereum.Value.fromUnsignedBigIntArray(_intervals)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentControlVariable(_id: BigInt): BigInt {
    let result = super.call(
      "currentControlVariable",
      "currentControlVariable(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return result[0].toBigInt();
  }

  try_currentControlVariable(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentControlVariable",
      "currentControlVariable(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentDebt(_id: BigInt): BigInt {
    let result = super.call("currentDebt", "currentDebt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toBigInt();
  }

  try_currentDebt(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentDebt",
      "currentDebt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  daoReward(): BigInt {
    let result = super.call("daoReward", "daoReward():(uint256)", []);

    return result[0].toBigInt();
  }

  try_daoReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("daoReward", "daoReward():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposit(
    _id: BigInt,
    _amounts: Array<BigInt>,
    _addresses: Array<Address>
  ): KlimaProV2__depositResult {
    let result = super.call(
      "deposit",
      "deposit(uint48,uint256[2],address[2]):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigIntArray(_amounts),
        ethereum.Value.fromAddressArray(_addresses)
      ]
    );

    return new KlimaProV2__depositResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_deposit(
    _id: BigInt,
    _amounts: Array<BigInt>,
    _addresses: Array<Address>
  ): ethereum.CallResult<KlimaProV2__depositResult> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint48,uint256[2],address[2]):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigIntArray(_amounts),
        ethereum.Value.fromAddressArray(_addresses)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KlimaProV2__depositResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  findMarketFor(
    tokenIn: Address,
    tokenOut: Address,
    amountIn: BigInt,
    minAmountOut: BigInt,
    maxExpiry: BigInt
  ): BigInt {
    let result = super.call(
      "findMarketFor",
      "findMarketFor(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(minAmountOut),
        ethereum.Value.fromUnsignedBigInt(maxExpiry)
      ]
    );

    return result[0].toBigInt();
  }

  try_findMarketFor(
    tokenIn: Address,
    tokenOut: Address,
    amountIn: BigInt,
    minAmountOut: BigInt,
    maxExpiry: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "findMarketFor",
      "findMarketFor(address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(amountIn),
        ethereum.Value.fromUnsignedBigInt(minAmountOut),
        ethereum.Value.fromUnsignedBigInt(maxExpiry)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  indexesFor(_user: Address): Array<BigInt> {
    let result = super.call("indexesFor", "indexesFor(address):(uint256[])", [
      ethereum.Value.fromAddress(_user)
    ]);

    return result[0].toBigIntArray();
  }

  try_indexesFor(_user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "indexesFor",
      "indexesFor(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  instantSwap(_id: BigInt): boolean {
    let result = super.call("instantSwap", "instantSwap(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toBoolean();
  }

  try_instantSwap(_id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("instantSwap", "instantSwap(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLive(_id: BigInt): boolean {
    let result = super.call("isLive", "isLive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toBoolean();
  }

  try_isLive(_id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLive", "isLive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liveMarkets(): Array<BigInt> {
    let result = super.call("liveMarkets", "liveMarkets():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_liveMarkets(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("liveMarkets", "liveMarkets():(uint256[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  liveMarketsBetween(firstIndex: BigInt, lastIndex: BigInt): Array<BigInt> {
    let result = super.call(
      "liveMarketsBetween",
      "liveMarketsBetween(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(firstIndex),
        ethereum.Value.fromUnsignedBigInt(lastIndex)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_liveMarketsBetween(
    firstIndex: BigInt,
    lastIndex: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "liveMarketsBetween",
      "liveMarketsBetween(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(firstIndex),
        ethereum.Value.fromUnsignedBigInt(lastIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  liveMarketsFor(
    _creator: boolean,
    _base: boolean,
    _address: Address
  ): Array<BigInt> {
    let result = super.call(
      "liveMarketsFor",
      "liveMarketsFor(bool,bool,address):(uint256[])",
      [
        ethereum.Value.fromBoolean(_creator),
        ethereum.Value.fromBoolean(_base),
        ethereum.Value.fromAddress(_address)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_liveMarketsFor(
    _creator: boolean,
    _base: boolean,
    _address: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "liveMarketsFor",
      "liveMarketsFor(bool,bool,address):(uint256[])",
      [
        ethereum.Value.fromBoolean(_creator),
        ethereum.Value.fromBoolean(_base),
        ethereum.Value.fromAddress(_address)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  marketPrice(_id: BigInt): BigInt {
    let result = super.call("marketPrice", "marketPrice(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toBigInt();
  }

  try_marketPrice(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marketPrice",
      "marketPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  markets(param0: BigInt): KlimaProV2__marketsResult {
    let result = super.call(
      "markets",
      "markets(uint256):(address,address,address,bool,bool,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new KlimaProV2__marketsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBoolean(),
      result[4].toBoolean(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt()
    );
  }

  try_markets(param0: BigInt): ethereum.CallResult<KlimaProV2__marketsResult> {
    let result = super.tryCall(
      "markets",
      "markets(uint256):(address,address,address,bool,bool,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KlimaProV2__marketsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBoolean(),
        value[4].toBoolean(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt()
      )
    );
  }

  marketsFor(tokenIn: Address, tokenOut: Address): Array<BigInt> {
    let result = super.call(
      "marketsFor",
      "marketsFor(address,address):(uint256[])",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_marketsFor(
    tokenIn: Address,
    tokenOut: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "marketsFor",
      "marketsFor(address,address):(uint256[])",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  marketsForBase(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "marketsForBase",
      "marketsForBase(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_marketsForBase(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marketsForBase",
      "marketsForBase(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketsForCreator(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "marketsForCreator",
      "marketsForCreator(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_marketsForCreator(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marketsForCreator",
      "marketsForCreator(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketsForQuote(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "marketsForQuote",
      "marketsForQuote(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_marketsForQuote(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marketsForQuote",
      "marketsForQuote(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxIn(_id: BigInt): BigInt {
    let result = super.call("maxIn", "maxIn(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toBigInt();
  }

  try_maxIn(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxIn", "maxIn(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  metadata(param0: BigInt): KlimaProV2__metadataResult {
    let result = super.call(
      "metadata",
      "metadata(uint256):(uint48,uint48,uint48,uint48,uint48,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new KlimaProV2__metadataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toI32(),
      result[6].toI32()
    );
  }

  try_metadata(
    param0: BigInt
  ): ethereum.CallResult<KlimaProV2__metadataResult> {
    let result = super.tryCall(
      "metadata",
      "metadata(uint256):(uint48,uint48,uint48,uint48,uint48,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KlimaProV2__metadataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toI32(),
        value[6].toI32()
      )
    );
  }

  notes(param0: Address, param1: BigInt): KlimaProV2__notesResult {
    let result = super.call(
      "notes",
      "notes(address,uint256):(uint256,uint48,uint48,uint48,uint48,address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new KlimaProV2__notesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toAddress()
    );
  }

  try_notes(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<KlimaProV2__notesResult> {
    let result = super.tryCall(
      "notes",
      "notes(address,uint256):(uint256,uint48,uint48,uint48,uint48,address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KlimaProV2__notesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toAddress()
      )
    );
  }

  payoutFor(_amount: BigInt, _id: BigInt): BigInt {
    let result = super.call(
      "payoutFor",
      "payoutFor(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_id)
      ]
    );

    return result[0].toBigInt();
  }

  try_payoutFor(_amount: BigInt, _id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "payoutFor",
      "payoutFor(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingFor(_user: Address, _index: BigInt): KlimaProV2__pendingForResult {
    let result = super.call(
      "pendingFor",
      "pendingFor(address,uint256):(uint256,bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return new KlimaProV2__pendingForResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_pendingFor(
    _user: Address,
    _index: BigInt
  ): ethereum.CallResult<KlimaProV2__pendingForResult> {
    let result = super.tryCall(
      "pendingFor",
      "pendingFor(address,uint256):(uint256,bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KlimaProV2__pendingForResult(
        value[0].toBigInt(),
        value[1].toBoolean()
      )
    );
  }

  pullNote(_from: Address, _index: BigInt): BigInt {
    let result = super.call("pullNote", "pullNote(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(_from),
      ethereum.Value.fromUnsignedBigInt(_index)
    ]);

    return result[0].toBigInt();
  }

  try_pullNote(_from: Address, _index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pullNote",
      "pullNote(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  refReward(): BigInt {
    let result = super.call("refReward", "refReward():(uint256)", []);

    return result[0].toBigInt();
  }

  try_refReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("refReward", "refReward():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewards(param0: Address, param1: Address): BigInt {
    let result = super.call("rewards", "rewards(address,address):(uint256)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBigInt();
  }

  try_rewards(param0: Address, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewards",
      "rewards(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  terms(param0: BigInt): KlimaProV2__termsResult {
    let result = super.call(
      "terms",
      "terms(uint256):(uint256,uint256,bool,uint48,uint48)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new KlimaProV2__termsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_terms(param0: BigInt): ethereum.CallResult<KlimaProV2__termsResult> {
    let result = super.tryCall(
      "terms",
      "terms(uint256):(uint256,uint256,bool,uint48,uint48)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new KlimaProV2__termsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  vestingContract(): Address {
    let result = super.call(
      "vestingContract",
      "vestingContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_vestingContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "vestingContract",
      "vestingContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  whitelisted(param0: Address): boolean {
    let result = super.call("whitelisted", "whitelisted(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_whitelisted(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("whitelisted", "whitelisted(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _authority(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CloseCall extends ethereum.Call {
  get inputs(): CloseCall__Inputs {
    return new CloseCall__Inputs(this);
  }

  get outputs(): CloseCall__Outputs {
    return new CloseCall__Outputs(this);
  }
}

export class CloseCall__Inputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CloseCall__Outputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _market(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _booleans(): Array<boolean> {
    return this._call.inputValues[2].value.toBooleanArray();
  }

  get _terms(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _intervals(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get id_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _addresses(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get payout_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get expiry_(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get index_(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }
}

export class DisableRewardsCall extends ethereum.Call {
  get inputs(): DisableRewardsCall__Inputs {
    return new DisableRewardsCall__Inputs(this);
  }

  get outputs(): DisableRewardsCall__Outputs {
    return new DisableRewardsCall__Outputs(this);
  }
}

export class DisableRewardsCall__Inputs {
  _call: DisableRewardsCall;

  constructor(call: DisableRewardsCall) {
    this._call = call;
  }

  get _dao(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class DisableRewardsCall__Outputs {
  _call: DisableRewardsCall;

  constructor(call: DisableRewardsCall) {
    this._call = call;
  }
}

export class EnableRewardsCall extends ethereum.Call {
  get inputs(): EnableRewardsCall__Inputs {
    return new EnableRewardsCall__Inputs(this);
  }

  get outputs(): EnableRewardsCall__Outputs {
    return new EnableRewardsCall__Outputs(this);
  }
}

export class EnableRewardsCall__Inputs {
  _call: EnableRewardsCall;

  constructor(call: EnableRewardsCall) {
    this._call = call;
  }
}

export class EnableRewardsCall__Outputs {
  _call: EnableRewardsCall;

  constructor(call: EnableRewardsCall) {
    this._call = call;
  }
}

export class GetRewardCall extends ethereum.Call {
  get inputs(): GetRewardCall__Inputs {
    return new GetRewardCall__Inputs(this);
  }

  get outputs(): GetRewardCall__Outputs {
    return new GetRewardCall__Outputs(this);
  }
}

export class GetRewardCall__Inputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class GetRewardCall__Outputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class PullNoteCall extends ethereum.Call {
  get inputs(): PullNoteCall__Inputs {
    return new PullNoteCall__Inputs(this);
  }

  get outputs(): PullNoteCall__Outputs {
    return new PullNoteCall__Outputs(this);
  }
}

export class PullNoteCall__Inputs {
  _call: PullNoteCall;

  constructor(call: PullNoteCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PullNoteCall__Outputs {
  _call: PullNoteCall;

  constructor(call: PullNoteCall) {
    this._call = call;
  }

  get newIndex_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PushNoteCall extends ethereum.Call {
  get inputs(): PushNoteCall__Inputs {
    return new PushNoteCall__Inputs(this);
  }

  get outputs(): PushNoteCall__Outputs {
    return new PushNoteCall__Outputs(this);
  }
}

export class PushNoteCall__Inputs {
  _call: PushNoteCall;

  constructor(call: PushNoteCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PushNoteCall__Outputs {
  _call: PushNoteCall;

  constructor(call: PushNoteCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _indexes(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RedeemAllCall extends ethereum.Call {
  get inputs(): RedeemAllCall__Inputs {
    return new RedeemAllCall__Inputs(this);
  }

  get outputs(): RedeemAllCall__Outputs {
    return new RedeemAllCall__Outputs(this);
  }
}

export class RedeemAllCall__Inputs {
  _call: RedeemAllCall;

  constructor(call: RedeemAllCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RedeemAllCall__Outputs {
  _call: RedeemAllCall;

  constructor(call: RedeemAllCall) {
    this._call = call;
  }
}

export class SetAuthorityCall extends ethereum.Call {
  get inputs(): SetAuthorityCall__Inputs {
    return new SetAuthorityCall__Inputs(this);
  }

  get outputs(): SetAuthorityCall__Outputs {
    return new SetAuthorityCall__Outputs(this);
  }
}

export class SetAuthorityCall__Inputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }

  get _newAuthority(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAuthorityCall__Outputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }
}

export class WhitelistCall extends ethereum.Call {
  get inputs(): WhitelistCall__Inputs {
    return new WhitelistCall__Inputs(this);
  }

  get outputs(): WhitelistCall__Outputs {
    return new WhitelistCall__Outputs(this);
  }
}

export class WhitelistCall__Inputs {
  _call: WhitelistCall;

  constructor(call: WhitelistCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WhitelistCall__Outputs {
  _call: WhitelistCall;

  constructor(call: WhitelistCall) {
    this._call = call;
  }
}
