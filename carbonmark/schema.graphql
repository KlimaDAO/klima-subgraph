enum ActivityType {
  UpdatedQuantity
  UpdatedPrice
  UpdatedExpiration
  UpdatedMinFillAmount
  Purchase
  Sold
  CreatedListing
  DeletedListing
}

enum CreditDataSource {
  CSV
  Event
}

type User @entity(immutable: false) {
  #id is the user's address -> also the document key on firebase
  id: Bytes!
  listings: [Listing!] @derivedFrom(field: "seller")
  activities: [Activity!] @derivedFrom(field: "user")
  purchases: [Purchase!] @derivedFrom(field: "user")
}

type Project @entity(immutable: false) {
 "Credit ID ({projectId}-{vintage})"
  id: ID!

  "Project ID ({registry Enum String}-{registry ProjectID})"
  key: String!

  # projectID: String!
  # projectType: String!
  # region: String!

  "Name of the project"
  name: String!

  "Methodologies associated with this project"
  methodology: String!

  "Vintage of the credit"
  vintage: BigInt!

  "Address of the credit"
  projectAddress: Bytes!

  "Token ID of the credit"
  tokenId: BigInt!

  "Registry of the project"
  registry: String!
  #   #relationships
  activities: [Activity!] @derivedFrom(field: "project")
  listings: [Listing!] @derivedFrom(field: "project")

  "Category associated with this project"
  category: Category!

  "Country where the project takes place"
  country: Country!

  "Date of the last update"
  updatedAt: BigInt

  "Whether the credit is ex-ante"
  isExAnte: Boolean!

  "Source of the credit data"
  creditDataSource: CreditDataSource!
}

# Intermediate pointer to allow projects to be referenced by address and tokenId only
type ProjectByToken @entity(immutable: false) {
  id: ID! # address-tokenId
  project: Project!
}

type Country @entity(immutable: false) {
  id: String!
}

type Category @entity(immutable: false) {
  id: String!
}

enum TokenStandard {
  ERC20
  ERC1155
  UNKNOWN
}

type Listing @entity(immutable: false) {
  id: ID!
  totalAmountToSell: BigInt!
  leftToSell: BigInt!
  tokenAddress: Bytes!
  tokenId: BigInt!
  active: Boolean
  deleted: Boolean # uint256
  batches: [BigInt!] # uint256
  batchPrices: [BigInt!] # uint256
  singleUnitPrice: BigInt!
  expiration: BigInt!
  minFillAmount: BigInt!
  tokenSymbol: String!
  #relationships
  project: Project!
  seller: User!
  activities: [Activity!] @derivedFrom(field: "listing")
  createdAt: BigInt
  updatedAt: BigInt
  tokenStandard: TokenStandard!
}

type Activity @entity(immutable: false) {
  id: String!
  amount: BigInt
  previousAmount: BigInt
  price: BigInt
  previousPrice: BigInt
  timeStamp: BigInt
  #relationships
  activityType: ActivityType!
  project: Project!
  user: User
  listing: Listing
  seller: User!
  buyer: User
}

type Purchase @entity(immutable: false) {
  id: Bytes!
  price: BigInt!
  amount: BigInt!
  timeStamp: BigInt!
  #relationships
  user: User!
  listing: Listing!
}

# Subgraph Versioning

type SubgraphVersion @entity(immutable: true) {
  id: ID!
  schemaVersion: String!
  publishedVersion: String!
}
