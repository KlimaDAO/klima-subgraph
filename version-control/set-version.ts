import fs from 'fs'
import path from 'path'

type Subgraph = {
  name: string
  versionJsonPath: string
  templateFile: string
  outputFile: string
  packageJsonPath: string
}

// Paths
const scriptDir = __dirname
const subgraphsConfigPath = path.join(scriptDir, 'config.json')

// Read the subgraphs configuration
const subgraphs = JSON.parse(fs.readFileSync(subgraphsConfigPath, 'utf8'))

// Function to inject versions for a single subgraph
function injectSubgraphVersion(subgraph: Subgraph) {
  const { name, versionJsonPath, outputFile } = subgraph

  try {
    // Resolve paths
    const versionJsonFullPath = path.resolve(process.cwd(), versionJsonPath)
    const outputFullPath = path.resolve(process.cwd(), outputFile)

    // Read the version.json file
    const versions = JSON.parse(fs.readFileSync(versionJsonFullPath, 'utf8'))

    if (!versions.schemaVersion || !versions.publishedVersion) {
      console.error(`Missing schemaVersion or publishedVersion in ${name} version.json`)
      return
    }

    const schemaVersion = versions.schemaVersion
    const publishedVersion = versions.publishedVersion

    const versionTsContent = `
      // This file is auto-generated by generateVersionTs.js
      export const SCHEMA_VERSION = '${schemaVersion}';
      export const PUBLISHED_VERSION = '${publishedVersion}';
    `

    fs.writeFileSync(outputFullPath, versionTsContent.trim())

    console.log(`Version information set into ${name} for version entity.`)
  } catch (error) {
    console.error(`Error setting versions for ${name}:`, error)
  }
}

// Inject versions for all subgraphs
subgraphs.forEach(injectSubgraphVersion)
