// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Lock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Lock entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Lock must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Lock", id.toString(), this);
    }
  }

  static load(id: string): Lock | null {
    return changetype<Lock | null>(store.get("Lock", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    return value!.toString();
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value!.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get stakerAddress(): Bytes {
    let value = this.get("stakerAddress");
    return value!.toBytes();
  }

  set stakerAddress(value: Bytes) {
    this.set("stakerAddress", Value.fromBytes(value));
  }

  get startedAt(): BigInt {
    let value = this.get("startedAt");
    return value!.toBigInt();
  }

  set startedAt(value: BigInt) {
    this.set("startedAt", Value.fromBigInt(value));
  }

  get maturityDate(): BigInt {
    let value = this.get("maturityDate");
    return value!.toBigInt();
  }

  set maturityDate(value: BigInt) {
    this.set("maturityDate", Value.fromBigInt(value));
  }

  get lockedInSeconds(): BigInt {
    let value = this.get("lockedInSeconds");
    return value!.toBigInt();
  }

  set lockedInSeconds(value: BigInt) {
    this.set("lockedInSeconds", Value.fromBigInt(value));
  }

  get lockedAmount(): BigDecimal {
    let value = this.get("lockedAmount");
    return value!.toBigDecimal();
  }

  set lockedAmount(value: BigDecimal) {
    this.set("lockedAmount", Value.fromBigDecimal(value));
  }
}

export class Unlock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Unlock entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Unlock must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Unlock", id.toString(), this);
    }
  }

  static load(id: string): Unlock | null {
    return changetype<Unlock | null>(store.get("Unlock", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    return value!.toString();
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value!.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get stakerAddress(): Bytes {
    let value = this.get("stakerAddress");
    return value!.toBytes();
  }

  set stakerAddress(value: Bytes) {
    this.set("stakerAddress", Value.fromBytes(value));
  }

  get maturityDate(): BigInt {
    let value = this.get("maturityDate");
    return value!.toBigInt();
  }

  set maturityDate(value: BigInt) {
    this.set("maturityDate", Value.fromBigInt(value));
  }

  get amount(): BigDecimal {
    let value = this.get("amount");
    return value!.toBigDecimal();
  }

  set amount(value: BigDecimal) {
    this.set("amount", Value.fromBigDecimal(value));
  }
}

export class VestingMetric extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VestingMetric entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VestingMetric must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VestingMetric", id.toString(), this);
    }
  }

  static load(id: string): VestingMetric | null {
    return changetype<VestingMetric | null>(store.get("VestingMetric", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get platform(): string {
    let value = this.get("platform");
    return value!.toString();
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    return value!.toString();
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }

  get dailyLockCount(): BigInt {
    let value = this.get("dailyLockCount");
    return value!.toBigInt();
  }

  set dailyLockCount(value: BigInt) {
    this.set("dailyLockCount", Value.fromBigInt(value));
  }

  get dailyLockAmount(): BigDecimal {
    let value = this.get("dailyLockAmount");
    return value!.toBigDecimal();
  }

  set dailyLockAmount(value: BigDecimal) {
    this.set("dailyLockAmount", Value.fromBigDecimal(value));
  }

  get dailyUnlockCount(): BigInt {
    let value = this.get("dailyUnlockCount");
    return value!.toBigInt();
  }

  set dailyUnlockCount(value: BigInt) {
    this.set("dailyUnlockCount", Value.fromBigInt(value));
  }

  get dailyUnlockAmount(): BigDecimal {
    let value = this.get("dailyUnlockAmount");
    return value!.toBigDecimal();
  }

  set dailyUnlockAmount(value: BigDecimal) {
    this.set("dailyUnlockAmount", Value.fromBigDecimal(value));
  }

  get dailyMaturityCount(): BigInt {
    let value = this.get("dailyMaturityCount");
    return value!.toBigInt();
  }

  set dailyMaturityCount(value: BigInt) {
    this.set("dailyMaturityCount", Value.fromBigInt(value));
  }

  get dailyMaturityAmount(): BigDecimal {
    let value = this.get("dailyMaturityAmount");
    return value!.toBigDecimal();
  }

  set dailyMaturityAmount(value: BigDecimal) {
    this.set("dailyMaturityAmount", Value.fromBigDecimal(value));
  }

  get totalAmountLocked(): BigDecimal {
    let value = this.get("totalAmountLocked");
    return value!.toBigDecimal();
  }

  set totalAmountLocked(value: BigDecimal) {
    this.set("totalAmountLocked", Value.fromBigDecimal(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value!.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }

  get index(): BigDecimal {
    let value = this.get("index");
    return value!.toBigDecimal();
  }

  set index(value: BigDecimal) {
    this.set("index", Value.fromBigDecimal(value));
  }

  get inFuture(): boolean {
    let value = this.get("inFuture");
    return value!.toBoolean();
  }

  set inFuture(value: boolean) {
    this.set("inFuture", Value.fromBoolean(value));
  }
}
