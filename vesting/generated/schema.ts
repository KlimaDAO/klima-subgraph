// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Vesting extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vesting entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vesting must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Vesting", id.toString(), this);
    }
  }

  static load(id: string): Vesting | null {
    return changetype<Vesting | null>(store.get("Vesting", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    return value!.toString();
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value!.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get stakerAddress(): Bytes {
    let value = this.get("stakerAddress");
    return value!.toBytes();
  }

  set stakerAddress(value: Bytes) {
    this.set("stakerAddress", Value.fromBytes(value));
  }

  get startedAt(): BigInt {
    let value = this.get("startedAt");
    return value!.toBigInt();
  }

  set startedAt(value: BigInt) {
    this.set("startedAt", Value.fromBigInt(value));
  }

  get maturityDate(): BigInt {
    let value = this.get("maturityDate");
    return value!.toBigInt();
  }

  set maturityDate(value: BigInt) {
    this.set("maturityDate", Value.fromBigInt(value));
  }

  get lockedInSeconds(): BigInt {
    let value = this.get("lockedInSeconds");
    return value!.toBigInt();
  }

  set lockedInSeconds(value: BigInt) {
    this.set("lockedInSeconds", Value.fromBigInt(value));
  }

  get lockedAmount(): BigDecimal {
    let value = this.get("lockedAmount");
    return value!.toBigDecimal();
  }

  set lockedAmount(value: BigDecimal) {
    this.set("lockedAmount", Value.fromBigDecimal(value));
  }
}

export class AggregatedVestingInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save AggregatedVestingInfo entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AggregatedVestingInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AggregatedVestingInfo", id.toString(), this);
    }
  }

  static load(id: string): AggregatedVestingInfo | null {
    return changetype<AggregatedVestingInfo | null>(
      store.get("AggregatedVestingInfo", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platform(): string {
    let value = this.get("platform");
    return value!.toString();
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get maturityDate(): string {
    let value = this.get("maturityDate");
    return value!.toString();
  }

  set maturityDate(value: string) {
    this.set("maturityDate", Value.fromString(value));
  }

  get totalUnlocks(): BigInt {
    let value = this.get("totalUnlocks");
    return value!.toBigInt();
  }

  set totalUnlocks(value: BigInt) {
    this.set("totalUnlocks", Value.fromBigInt(value));
  }

  get totalAmount(): BigDecimal {
    let value = this.get("totalAmount");
    return value!.toBigDecimal();
  }

  set totalAmount(value: BigDecimal) {
    this.set("totalAmount", Value.fromBigDecimal(value));
  }
}
